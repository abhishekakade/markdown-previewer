{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["markedlib","require","setOptions","gfm","breaks","placeholderStuff","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","content","target","value","state","react_default","a","createElement","className","style","overflow","name","id","textAlign","type","rows","cols","onChange","dangerouslySetInnerHTML","__html","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAKIA,SAAYC,EAAQ,KACxBD,EAAUE,WAAW,CACnBC,KAAK,EACLC,QAAQ,IAGV,IAAIC,EAAgB,8hCAsJLC,cA/Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,gBAAkB,SAAAC,GAChBR,EAAKS,SAAS,CACZC,QAASF,EAAEG,OAAOC,SAPpBZ,EAAKa,MAAQ,CACXH,QAASZ,GAHCE,wEAcZ,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAGbH,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAAEC,SAAU,QACnBF,UAAU,gCACVG,KAAK,cAELN,EAAAC,EAAAC,cAAA,MAAIK,GAAG,iBAAiBH,MAAO,CAAEI,UAAW,WAA5C,mBAGAR,EAAAC,EAAAC,cAAA,YACEO,KAAK,OACLF,GAAG,SACHG,KAAK,KACLC,KAAK,KACLC,SAAUvB,KAAKI,gBACfK,MAAOT,KAAKU,MAAMH,WAMtBI,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAAEC,SAAU,QACnBF,UAAU,+BACVG,KAAK,cAELN,EAAAC,EAAAC,cAAA,MAAIK,GAAG,kBAAkBH,MAAO,CAAEI,UAAW,WAA7C,oBAGAR,EAAAC,EAAAC,cAAA,OACEK,GAAG,UACHM,wBAAyB,CACvBC,OAAQnC,EAAUU,KAAKU,MAAMH,qBAlDzBmB,aCrFZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,sBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,sBAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.d8531253.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// import { ScrollSync, ScrollSyncPane } from \"react-scroll-sync\";\r\n\r\nlet markedlib = require(\"marked\");\r\nmarkedlib.setOptions({\r\n  gfm: true,\r\n  breaks: true\r\n});\r\n\r\nlet placeholderStuff = `\r\n## Headings\r\n# H1\r\n## H2\r\n### H3\r\n#### H4\r\n##### H5\r\n###### H6\r\n\r\n---\r\n\r\n## Bold, Italic, Strikethrough\r\n\r\nEmphasis / Italics - *asterisks* or _underscores_.\r\n\r\nBold - **asterisks** or __underscores__.\r\n\r\nBold with Italic - **asterisks and _underscores_**.\r\n\r\nStrikethrough - ~~Strikethrough~~\r\n\r\n---\r\n\r\n## List Items\r\n\r\n1. list item\r\n2. more items \r\n   1. list item\r\n   2. list item\r\n\r\n- list item\r\n- more items\r\n  - list item\r\n  - list item\r\n\r\n+ list item\r\n+ more items \r\n  + list item\r\n  + list item\r\n\r\n---\r\n\r\n## Links\r\n\r\n[Inline link](https://www.google.com)\r\n\r\n[Inline link with title](https://www.google.com \"Google's Homepage\")\r\n\r\n---\r\n\r\n## Blockquotes\r\n\r\n> Blockquotes can be used to quote a message/text\r\n\r\n---\r\n\r\n## Inline Code\r\n\r\n\\`some inline code\\`\r\n\r\n---\r\n\r\n## Code Block\r\n\r\n\\`\\`\\`\r\n\r\n// multi-line code:\r\n\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\\`\\`\\`\r\n\r\n---\r\n\r\n## Images\r\n\r\n![alt-text](https://images.pexels.com/photos/416160/pexels-photo-416160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=100&w=150)\r\n\r\n## Horizontal Rule\r\n\r\n---\r\n***\r\n___\r\n`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      content: placeholderStuff\r\n    };\r\n  }\r\n\r\n  onChangeHandler = e => {\r\n    this.setState({\r\n      content: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <ScrollSync> */}\r\n        {/* <ScrollSyncPane> */}\r\n        <div\r\n          style={{ overflow: \"auto\" }}\r\n          className=\"textarea-container syncscroll\"\r\n          name=\"myElements\"\r\n        >\r\n          <h2 id=\"editor-heading\" style={{ textAlign: \"center\" }}>\r\n            Markdown Editor\r\n          </h2>\r\n          <textarea\r\n            type=\"text\"\r\n            id=\"editor\"\r\n            rows=\"25\"\r\n            cols=\"50\"\r\n            onChange={this.onChangeHandler}\r\n            value={this.state.content}\r\n          />\r\n        </div>\r\n        {/* </ScrollSyncPane> */}\r\n\r\n        {/* <ScrollSyncPane> */}\r\n        <div\r\n          style={{ overflow: \"auto\" }}\r\n          className=\"preview-container syncscroll\"\r\n          name=\"myElements\"\r\n        >\r\n          <h2 id=\"preview-heading\" style={{ textAlign: \"center\" }}>\r\n            Markdown Preview\r\n          </h2>\r\n          <div\r\n            id=\"preview\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: markedlib(this.state.content)\r\n            }}\r\n          >\r\n            {/* <div>{marked(this.state.content)}</div> */}\r\n          </div>\r\n        </div>\r\n        {/* </ScrollSyncPane> */}\r\n        {/* </ScrollSync> */}\r\n        {/* <script src=\"path/to/syncscroll.js\" /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}